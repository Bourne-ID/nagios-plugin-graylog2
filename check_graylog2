#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import json
import nagiosplugin
import nagiosplugin.performance
import nagiosplugin.state
import time
import urllib2


class Graylog2Processing(nagiosplugin.Context):
	def evaluate(self, metric, resource):
		if metric.value:
			return self.result_cls(nagiosplugin.state.Ok, "Graylog2 Server is processing messages", metric)
		else:
			return self.result_cls(nagiosplugin.state.Critical, "Graylog2 Server is not processing messages", metric)


class Graylog2ServerID(nagiosplugin.Context):
	def performance(self, metric, resource):
		return nagiosplugin.performance.Performance(metric.name, metric.value)


class Graylog2Check(nagiosplugin.Resource):
	def __init__(self, args):
		self.args = args

	def probe(self):
		# initialize api handler
		query_start = time.time()
		api_base_uri = 'http://%s:%d/' % (self.args.host, int(self.args.port))

		passman = urllib2.HTTPPasswordMgrWithDefaultRealm()
		passman.add_password(None, api_base_uri, self.args.username, self.args.password)
		urllib2.install_opener(urllib2.build_opener(urllib2.HTTPBasicAuthHandler(passman)))
		req = urllib2.Request(api_base_uri + 'system')

		try:
			resp = urllib2.urlopen(req)
		except urllib2.HTTPError as msg:
			raise RuntimeError("Graylog API returned HTTP Error code %s" % msg.code)
		except urllib2.URLError as msg:
			raise RuntimeError("Graylog API HTTP error: %s" % msg.reason)
		else:
			body = resp.read()
			duration = time.time() - query_start
			try:
				j = json.loads(body)
				yield nagiosplugin.Metric('graylog2_processing', j['is_processing'])
				yield nagiosplugin.Metric('graylog2_serverid', j['server_id'])
			except ValueError as msg:
				raise RuntimeError("Graylog API returned non-JSON value: %s" % str(msg))
			yield nagiosplugin.Metric('query_time', duration, uom='s')


@nagiosplugin.guarded
def main():
	argp = argparse.ArgumentParser()
	argp.add_argument('-v', '--verbose', action='count', default=0)
	argp.add_argument('-u', '--username', default='admin', help='Graylog2 username')
	argp.add_argument('--password', help='Graylog2 password')
	argp.add_argument('-H', '--host', default="localhost", help='Hostname or network address to probe')
	argp.add_argument('-p', '--port', default=12900, help='TCP port to probe')
	argp.add_argument('-w', '--warn', default=1.0, help="Warning time for response")
	argp.add_argument('-c', '--crit', default=2.0, help="Critical time for response")
	args = argp.parse_args()

	check = nagiosplugin.Check(Graylog2Check(args))
	check.add(nagiosplugin.ScalarContext('query_time', ":%s" % args.warn, ":%s" % args.crit))
	check.add(Graylog2Processing('graylog2_processing'))
	check.add(Graylog2ServerID('graylog2_serverid'))
	check.main(verbose=args.verbose)

if __name__ == '__main__':
	main()
